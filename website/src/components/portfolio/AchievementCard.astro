---
import AstroIcon, {Icon} from 'astro-icon';
import type {CollectionEntry} from 'astro:content';
import {getEntries} from 'astro:content';
import TeamMemberPicture from './TeamMemberPicture.astro';
import ImageLink from '../link/ImageLink.svelte';
import {Image} from 'astro:assets';
import UrlLink from '../link/UrlLink.astro';
import PdfLink from '../link/PdfLink.svelte';

interface Props {
	achievement: CollectionEntry<'achievements'>;
}

const {achievement} = Astro.props;
const team = achievement.data.team ? await getEntries(achievement.data.team) : [];
---

<li
	class="relative block py-2 px-4 justify-between items-center border border-solid border-black first:rounded-t-md last:rounded-b-md">
	<div class="flex flex-wrap">
		<div class="w-full flex justify-center order-1 sm:order-2">
			<div class="flex-grow-0 sm:flex-grow mr-auto basis-0"></div>
			<div class="flex justify-center">
				<Icon
					class:list={{highlight: achievement.data.highlighted}}
					name={achievement.data.icon}
					color={achievement.data.iconColor}
				/>
				<div>
					<span class="badge bg-primary rounded text-white">{achievement.data.placement}</span>
				</div>
			</div>
			<div class="flex-grow basis-0 ml-auto">
				<p class="text-end text-title">
					<small>{achievement.data.date.toISOString().substring(0, 10)}</small>
				</p>
			</div>
		</div>
		<div class="w-full my-1 order-2 sm:order-1">
			<div class="font-bold text-title text-center">{achievement.data.name}</div>
		</div>
	</div>
	<div class="flex flex-wrap">
		<div class="w-full sm:w-1/2 flex justify-center sm:justify-start teams">
			{
				achievement.data.team && (
					<dir class="avatar-group -space-x-2 my-0 px-2 py-[0.2rem]">
						{team.map((people) => (
							<TeamMemberPicture
								class="avatar rounded-full border-0 ring ring-secondary"
								width={40}
								height={40}
								person={people}
							/>
						))}
					</dir>
				)
			}
		</div>
		<div class="w-full sm:w-1/2 flex print:hidden justify-center items-center sm:justify-end mt-1 join">
			{
				achievement.data.urls.map((url) => (
					<UrlLink {url}>
						<AstroIcon name={url.icon} slot="icon" />
					</UrlLink>
				))
			}
			{
				achievement.data.pdfs.map((pdf, index) => (
					<PdfLink client:idle pdf={pdf} slug={achievement.id} index={index}>
						<AstroIcon name={pdf.icon} slot="icon" />
					</PdfLink>
				))
			}
			{
				achievement.data.images.map((image, index) => (
					<ImageLink client:idle image={image} slug={achievement.id} index={index}>
						<AstroIcon name={image.icon} slot="icon" />
						<Image src={image.src} alt={image.alt} />
					</ImageLink>
				))
			}
		</div>
	</div>
</li>

<style>
	@keyframes highlight {
		0% {
			transform: none;
		}
		50% {
			transform: scale(1.1);
		}
		100% {
			transform: none;
		}
	}

	[astro-icon] {
		min-width: 32px;
		min-height: 32px;
	}

	.badge {
		min-width: 80px;
	}

	[astro-icon].highlight {
		animation-name: highlight;
		animation-iteration-count: infinite;
		animation-duration: 2s;
	}

	.teams > p {
		line-height: 40px;
		margin: 0;
	}

	li {
		transition: 0.1s;
	}

	li:hover {
		transform: scale(1.01);
		z-index: 10;
	}

	li:has(> .divider) {
		border: 0;
	}

	li:hover:has(> .divider) {
		transform: unset;
	}

	@media print {
		li {
			width: 100%;
			display: inline-block;
			page-break-before: always;
			page-break-inside: avoid;
			page-break-after: always;
		}
		li:hover {
			transform: unset;
		}
	}
</style>
