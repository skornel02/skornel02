---
import AstroIcon, {Icon} from 'astro-icon';
import type {CollectionEntry} from 'astro:content';
import {getEntries} from 'astro:content';
import TeamMemberPicture from './TeamMemberPicture.astro';
import ImageLink from '../link/ImageLink.svelte';
import {Image} from 'astro:assets';
import UrlLink from '../link/UrlLink.astro';
import PdfLink from '../link/PdfLink.svelte';

interface Props {
	achievement: CollectionEntry<'achievements'>;
}

const {achievement} = Astro.props;

const team = achievement.data.team ? await getEntries(achievement.data.team) : [];
---

<div class="card bg-base-100 shadow-xl my-2">
	<div class="card-body">
		<h3 class="card-title justify-center text-center text-lg order-2 sm:order-1">
			{achievement.data.name}
		</h3>
		<div class="w-full flex justify-center order-1 sm:order-2">
			<div class="flex-grow-0 sm:flex-grow mr-auto basis-0"></div>
			<div class="flex justify-center">
				<Icon
					class:list={{highlight: achievement.data.highlighted}}
					name={achievement.data.icon}
					color={achievement.data.iconColor}
				/>
				<div>
					<span class="badge bg-primary rounded text-white">{achievement.data.placement}</span>
				</div>
			</div>
			<div class="flex-grow basis-0 ml-auto">
				<p class="text-end text-title">
					<small>{achievement.data.date.toISOString().substring(0, 10)}</small>
				</p>
			</div>
		</div>
		<div class="card-actions justify-between items-center order-4">
			<div class="flex justify-center sm:justify-start teams">
				{
					achievement.data.team && (
						<dir class="avatar-group -space-x-2 my-0 px-2 py-[0.2rem]">
							{team.map((people) => (
								<TeamMemberPicture
									class="avatar rounded-full border-0 ring ring-secondary"
									width={40}
									height={40}
									person={people}
								/>
							))}
						</dir>
					)
				}
			</div>
			<div class="flex print:hidden justify-center items-center sm:justify-end mt-1 join">
				{
					achievement.data.urls.map((url) => (
						<UrlLink {url}>
							<AstroIcon name={url.icon} slot="icon" />
						</UrlLink>
					))
				}
				{
					achievement.data.pdfs.map((pdf, index) => (
						<PdfLink client:idle pdf={pdf} slug={achievement.id} index={index}>
							<AstroIcon name={pdf.icon} slot="icon" />
						</PdfLink>
					))
				}
				{
					achievement.data.images.map((image, index) => (
						<ImageLink client:idle image={image} slug={achievement.id} index={index}>
							<AstroIcon name={image.icon} slot="icon" />
							<Image src={image.src} alt={image.alt} />
						</ImageLink>
					))
				}
			</div>
		</div>
	</div>
	{
		achievement.data.coverImage !== undefined ? (
			<figure class="max-h-[150px] lg:max-h-[300px]">
				<Image
					src={achievement.data.coverImage.src}
					alt={achievement.data.coverImage.alt}
					class="object-cover object-center"
					loading="lazy"
				/>
			</figure>
		) : null
	}
</div>

<style>
	@keyframes highlight {
		0% {
			transform: none;
		}
		50% {
			transform: scale(1.1);
		}
		100% {
			transform: none;
		}
	}

	[astro-icon] {
		min-width: 32px;
		min-height: 32px;
	}

	.badge {
		min-width: 80px;
	}

	[astro-icon].highlight {
		animation-name: highlight;
		animation-iteration-count: infinite;
		animation-duration: 2s;
	}

	.teams > p {
		line-height: 40px;
		margin: 0;
	}

	li {
		transition: 0.1s;
	}

	li:hover {
		transform: scale(1.01);
		z-index: 10;
	}

	li:has(> .divider) {
		border: 0;
	}

	li:hover:has(> .divider) {
		transform: unset;
	}

	@media print {
		li {
			width: 100%;
			display: inline-block;
			page-break-before: always;
			page-break-inside: avoid;
			page-break-after: always;
		}
		li:hover {
			transform: unset;
		}
	}
</style>
