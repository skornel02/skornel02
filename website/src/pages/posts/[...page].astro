---
import type {GetStaticPaths, Page} from 'astro';
import {CollectionEntry, getCollection} from 'astro:content';
import Navbar from '../../components/navigation/Navbar.astro';
import Layout from '../../layouts/Layout.astro';
import PostsSearch from '../../components/posts/PostsSearch.svelte';
import {Icon} from 'astro-icon';
import PostCard from '../../components/posts/PostCard.astro';
import {PageSize} from '../../components/posts/PostPagination';
import { createPostNavigationHref } from '../../hrefs';
import { AstroSeo } from '@astrolib/seo';

interface Props {
	page: Page<CollectionEntry<'posts'>>;
}

interface PageData {
	href: string;
	text: string;
	active: boolean;
}

export const getStaticPaths = (async ({paginate}) => {
	const posts = (await getCollection('posts', (post) => !post.data.hidden)).sort(
		(a, b) => b.data.date.getTime() - a.data.date.getTime()
	);

	return paginate(posts, {pageSize: PageSize});
}) satisfies GetStaticPaths;

const posts = (await getCollection('posts', (post) => !post.data.hidden)).sort(
	(a, b) => b.data.date.getTime() - a.data.date.getTime()
);

const {page} = Astro.props;

const distanceToStart = page.currentPage - 1;
const distanceToEnd = page.lastPage - page.currentPage;

const showingPageStartAmount = 2 + Math.max(0, 2 - distanceToEnd);
const showingPageEndAmount = 2 + Math.max(0, 2 - distanceToStart);

const showingPageStart = Math.max(1, page.currentPage - showingPageStartAmount);
const showingPageEnd = Math.min(page.lastPage, page.currentPage + showingPageEndAmount);
const pagesToShow: PageData[] = [];
for (let i = showingPageStart; i <= showingPageEnd; i++) {
	pagesToShow.push({
		href: createPostNavigationHref(i),
		text: i.toString(),
		active: i === page.currentPage,
	});
}

const postsToShow = page.data;

console.log(page.currentPage);

const firstPageActive = page.currentPage > 2;
const previousPageActive = page.url.prev !== undefined;
const nextPageActive = page.url.next !== undefined;
const lastPageActive = page.currentPage < page.lastPage - 1;
---

<Layout title="Posts - SK">
	<AstroSeo
		slot="head"
		title={`Posts - Page ${page.currentPage}`}
		description="Posts of SK"
		twitter={{
			cardType: 'summary',
		}}
		openGraph={{
			type: 'website',
			locale: 'en',
			site_name: 'skornel02',
		}}
	/>

	<Navbar pageTitle={`Posts`}>
		<div class="container">
			<PostsSearch client:visible posts={posts} />

			{postsToShow.map((post) => <PostCard {post} page={page.currentPage} />)}

			<nav class="flex justify-center">
				<div class="join mx-auto">
					<a
						class="join-item btn btn-primary px-0"
						class:list={{'btn-disabled': !firstPageActive}}
						href={createPostNavigationHref()}>
						<Icon name="mdi:chevron-double-left" height="80%" />
					</a>
					<a
						class="join-item btn btn-primary px-0"
						class:list={{'btn-disabled': !previousPageActive}}
						href={page.url.prev}>
						<Icon name="mdi:chevron-left" height="80%" />
					</a>
					{
						pagesToShow.map(({href, text, active}) => (
							<a class="join-item btn" class:list={{'btn-disabled': active}} {href}>
								{text}
							</a>
						))
					}
					<a
						class="join-item btn btn-primary px-0"
						class:list={{'btn-disabled': !nextPageActive}}
						href={page.url.next}>
						<Icon name="mdi:chevron-right" height="80%" />
					</a>

					<a
						class="join-item btn btn-primary px-0"
						class:list={{'btn-disabled': !lastPageActive}}
						href={createPostNavigationHref(page.lastPage)}>
						<Icon name="mdi:chevron-double-right" height="80%" />
					</a>
				</div>
			</nav>
		</div>
	</Navbar>
</Layout>
